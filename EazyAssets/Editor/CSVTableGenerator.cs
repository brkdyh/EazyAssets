//#define XLua  /*若使用Xlua,可以开放此代码用以生成XLua调用文件*/

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using System.Text;
using System.IO;
using System;

/// <summary>
/// CSV配置表自动生成工具
/// </summary>
public class CSVTableGenerator : MonoBehaviour
{
    //表格读取相对路径--在这里设置
    private static readonly string TABLES_PATH = @".\Assets\AssetBundles\Raw\Tables";

    //.cs输出相对路径--在这里设置
    private static readonly string OUTPUT_PATH = @".\Assets\Scripts\EazyAssets\Tables\CSV_Tables";

    //配置表注册文件--在这里设置
    private static readonly string REGISTER_TABLES = @".\Assets\Scripts\EazyAssets\Tables\GameTableRegister.cs";

    //配置表格管理器文件--在这里设置
    private static readonly string MANAGE_TABLES = @".\Assets\Scripts\EazyAssets\Tables\GameTableManager.cs";

    //表格管理器代码模板路径
    private static readonly string TABLE_MANAGER_TEMPLATE_PATH = @".\Assets\EazyAssets\Editor\GameTableManagerTemplates.txt";

    //文件头
    private static readonly string GRNERATE_HEADER = "/*************************************************\r\n    This File is Auto Generated By TableGenerator\r\n    Please Don't Modify It\r\n*************************************************/";

    [MenuItem("工具/一键生成表格", false, 10)]
    public static void GenerateTables()
    {
        if (!Directory.Exists(TABLES_PATH))
        {
            //DebugConsole.LogError("当前相对路径为：" + Directory.GetCurrentDirectory());
            Directory.CreateDirectory(TABLES_PATH);
            DebugConsole.Log("表格目录为空，已创建表格目录。");
            AssetDatabase.Refresh();
            return;
        }

        //生成表格路径
        if (!Directory.Exists(OUTPUT_PATH))
            Directory.CreateDirectory(OUTPUT_PATH);

        //遍历所有.csv文件,并生成客户端代码
        string[] tableFiles = Directory.GetFiles(TABLES_PATH);

        #region 生成代码文件
        foreach (var tableFilePath in tableFiles)
        {
            if (tableFilePath.Contains(".csv")
                && !tableFilePath.Contains(".meta")
                && File.Exists(tableFilePath))
            {
                StreamReader fileReader = new StreamReader(File.OpenRead(tableFilePath));
                string fileName = tableFilePath.Substring(TABLES_PATH.Length + 1);
                try
                {
                    using (fileReader)
                    {
                        DebugConsole.Log("正在生成表格：" + fileName);

                        //添加文件头
                        StringBuilder sb = new StringBuilder();
                        sb.Append(GRNERATE_HEADER);

                        string tablePropertiesNames = fileReader.ReadLine();
                        //Debug.Log(tablePropertiesNames);
                        string tablePropertiesClasses = fileReader.ReadLine();
                        //Debug.Log(tablePropertiesClasses);

                        //转化属性及类型用于代码生成
                        Dictionary<string, Type> properties = ParseProperties(tablePropertiesNames, tablePropertiesClasses, fileName);

                        string tableName = fileName.Replace(".csv", "");
                        sb.Append("\r\nusing System;");
                        sb.Append("\r\nusing System.Collections;");
                        sb.Append("\r\nusing System.Collections.Generic;");

                        sb.Append("\r\n\r\n");
#if XLua
                        sb.Append("[XLua.LuaCallCSharp]");      //添加Xlua调用支持
#endif
                        sb.Append("\r\n");
                        sb.AppendFormat("public class tab_{0} : BaseTable", tableName);
                        sb.Append("\r\n{");

                        //写文件名
                        sb.Append("\r\n    /*文件名，用于加载*/");
                        sb.Append("\r\n");
                        sb.AppendFormat("    public static string sTableName = \"{0}\";", tableName);
                        sb.Append("\r\n\r\n");

                        //写数据容器
                        sb.Append("    /*表格数据*/");
                        sb.Append("\r\n");
                        sb.AppendFormat("    Dictionary<int, {0}_Data> tab_Data = new Dictionary<int, {1}_Data>();", tableName, tableName);
                        sb.Append("\r\n\r\n");

                        //写数据结构
                        sb.Append("    /*表数据结构类型，用于保存数据*/");
                        sb.Append("\r\n");
                        sb.AppendFormat("    public class {0}_Data : Table_Data", tableName);
                        sb.Append("\r\n    {");
                        //根据属性写数据结构
                        foreach (var p in properties)
                        {
                            //Debug.Log(p.Value + "   " + p.Key);
                            sb.Append("\r\n");
                            sb.AppendFormat("        public {0} {1};", p.Value, p.Key);
                        }
                        sb.Append("\r\n    }");
                        sb.Append("\r\n\r\n");

                        //写转化函数
                        sb.Append("    /*加载数据*/");
                        sb.Append("\r\n");
                        sb.Append("    public override void LoadData(string content)");
                        sb.Append("\r\n    {");
                        sb.Append("\r\n");
                        sb.Append("        string[] columData = content.Split(',');");
                        sb.Append("\r\n");
                        sb.AppendFormat("        {0}_Data data = new {1}_Data", tableName, tableName);
                        sb.Append("\r\n        {");
                        int dataColum = 0;
                        //读取数据
                        foreach (var p in properties)
                        {
                            sb.Append("\r\n");
                            if (p.Value == typeof(string))
                            {
                                sb.AppendFormat("            {0} = columData[{1}],", p.Key, dataColum);
                            }
                            else
                            {
                                sb.AppendFormat("            {0} = {1}.Parse(columData[{2}]),", p.Key, p.Value, dataColum);
                            }

                            dataColum++;
                        }

                        sb.Append("\r\n        };");
                        sb.Append("\r\n");
                        sb.Append("        tab_Data.Add(data.ID, data);");
                        sb.Append("\r\n    }");

                        //获取数据Get方法
                        sb.Append("\r\n\r\n");
                        sb.Append("    /*根据ID获取数据*/");
                        sb.AppendFormat("\r\n    public {0}_Data GetData(int ID)", tableName);
                        sb.Append("\r\n    {");
                        sb.Append("\r\n        if (tab_Data.ContainsKey(ID)) return tab_Data[ID];");
                        sb.Append("\r\n        else return null;");
                        sb.Append("\r\n    }");

                        //获取全部数据方法
                        sb.Append("\r\n\r\n");
                        sb.Append("    /*获取全部数据*/");
                        sb.AppendFormat("\r\n    public Dictionary<int, {0}_Data> GetAllData()", tableName);
                        sb.Append("\r\n    {");
                        sb.Append("\r\n        return tab_Data;");
                        sb.Append("\r\n    }");

                        //获取表格名称
                        sb.Append("\r\n\r\n");
                        sb.Append("    /*获取表格名称*/");
                        sb.Append("\r\n    public override string GetTableName()");
                        sb.Append("\r\n    {");
                        sb.Append("\r\n        return sTableName;");
                        sb.Append("\r\n    }");

                        //GetBaseData-lua接口
                        sb.Append("\r\n\r\n");
                        sb.Append("\r\n    /*暴露给Lua端获取数据*/");
                        sb.Append("\r\n");
                        sb.Append(@"    public override Table_Data GetBaseData(int ID)
    {
        if (tab_Data.ContainsKey(ID)) return tab_Data[ID];
        else return null;
    }");
                        sb.Append("\r\n}");
                        //Debug.Log(sb.ToString());
                        StreamWriter sw = new StreamWriter(File.Create(string.Format("{0}\\tab_{1}.cs", OUTPUT_PATH, tableName)));
                        using (sw)
                        {
                            sw.Write(sb.ToString());
                        }

                        DebugConsole.Log("生成表格成功：" + fileName);
                    }
                }
                catch (Exception ex)
                {
                    DebugConsole.LogError(ex.Message);
                    if (fileReader != null)
                    {
                        fileReader.Close();
                        fileReader.Dispose();
                    }
                    DebugConsole.LogError(string.Format("生成表格 [{0}] 失败。", fileName));
                }
            }
        }
#endregion

        //DebugConsole.Log("生成表格结束!");

        //自动注册
        RegisterTables();
        //刷新AssetDatabase
        AssetDatabase.Refresh();
    }

    //转化属性
    static Dictionary<string, Type> ParseProperties(string pNames, string pClasses, string tableName)
    {
        Dictionary<string, Type> properties = new Dictionary<string, Type>();

        string[] names = pNames.Split(',');
        if (names[0] != "ID")
            throw (new Exception(string.Format("生成错误：表格 [{0}] 中第一项属性名称必须是<ID>", tableName)));

        string[] classes = pClasses.Split(',');
        if (classes[0] != "INT")
            throw (new Exception(string.Format("生成错误：表格 [{0}] 中第一项属性类型必须是<INT>", tableName)));

        for (int i = 0; i < names.Length; i++)
        {
            if (i < classes.Length)
            {
                string pClass = classes[i];
                if (pClass == string.Empty
                    || pClass == "\0")
                    throw (new Exception(string.Format("生成错误：表格 [{0}] 中属性 <{1}> 对应类型为空。", tableName, names[i])));
                //DebugConsole.Log(ParseStringToType(pClass));

                properties.Add(names[i], ParseStringToType(pClass));
            }
            else
                throw (new Exception(string.Format("生成错误：表格 [{0}] 中属性 <{1}> 对应类型为空。", tableName, names[i])));
        }
        return properties;
    }

    //将字符串转化为类型
    static Type ParseStringToType(string type)
    {
        switch (type)
        {
            case "INT":
                return Type.GetType("System.Int32");
            case "STRING":
                return Type.GetType("System.String");
            case "FLOAT":
                return Type.GetType("System.Single");
            case "BOOL":
                return Type.GetType("System.Boolean");
            default:
                return null;
        }
    }

    [MenuItem("工具/注册表格", false, 20)]
    public static void RegisterTables()
    {
        if (Directory.Exists(OUTPUT_PATH))
        {
            string[] filesInfo = Directory.GetFiles(OUTPUT_PATH);

            StreamWriter sw = new StreamWriter(File.Create(REGISTER_TABLES));
            StringBuilder sb = new StringBuilder();
            using (sw)
            {
                sb.Append(GRNERATE_HEADER);
                sb.Append("\r\nusing System.Collections;");
                sb.Append("\r\nusing System.Collections.Generic;");
                sb.Append("\r\npublic partial class GameTableManager : Singleton<GameTableManager>");
                sb.Append("\r\n{");
                sb.Append("\r\n    public void RegisterTables()");
                sb.Append("\r\n    {");

                //遍历注册
                foreach (var file in filesInfo)
                {
                    if (!file.Contains(".meta"))
                    {//过滤meta文件
                        string fileName = file.Replace(OUTPUT_PATH + "\\", "");
                        string tableName = fileName.Replace(".cs", "");
                        sb.AppendFormat("\r\n        Tables.Add(typeof({0}),new {1}());", tableName, tableName);
                    }
                }

                sb.Append("\r\n    }");
                sb.Append("\r\n}");

                sw.Write(sb.ToString());
            }

            //生成管理器文件
            if (!File.Exists(MANAGE_TABLES))
            {
                StreamWriter msw = new StreamWriter(File.Create(MANAGE_TABLES));
                using (msw)
                {
                    msw.Write(File.ReadAllText(TABLE_MANAGER_TEMPLATE_PATH));
                }
            }

            AssetDatabase.Refresh();
        }
    }
}
